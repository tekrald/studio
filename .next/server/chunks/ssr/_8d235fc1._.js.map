{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/assetActions.ts"],"sourcesContent":["\n'use server';\n// import type { User } from 'firebase/auth'; // Firebase Auth não está sendo usado no momento\n// import { collection, addDoc, serverTimestamp } from 'firebase/firestore'; // Firestore não está sendo usado no momento\n// import { db } from '@/lib/firebase'; // db será null\nimport type { AssetFormData } from '@/types/asset';\n// import { auth } from '@/lib/firebase'; // auth será null\n\nexport async function addAsset(data: AssetFormData, userId: string): Promise<{ success: boolean; error?: string; assetId?: string }> {\n  if (!userId) {\n    return { success: false, error: 'Usuário não autenticado.' };\n  }\n\n  console.log('Simulando adição de ativo (Firebase desabilitado):', {\n    userId,\n    tipo: data.tipo,\n    nomeAtivo: data.nomeAtivo,\n    dataAquisicao: data.dataAquisicao,\n    observacoes: data.observacoes, // Alterado de descricaoDetalhada\n    // valorAtualEstimado: data.valorAtualEstimado, // Removido da simulação do form\n    quemComprou: data.quemComprou,\n    contribuicaoParceiro1: data.contribuicaoParceiro1,\n    contribuicaoParceiro2: data.contribuicaoParceiro2,\n    // Campos específicos (serão undefined se não aplicável ao tipo)\n    tipoAtivoDigital: data.tipoAtivoDigital, // Alterado de tipoCriptoAtivoDigital\n    quantidadeDigital: data.quantidadeDigital,\n    valorPagoEpocaDigital: data.valorPagoEpocaDigital, // Label alterada no form, campo permanece\n    tipoImovelBemFisico: data.tipoImovelBemFisico,\n    enderecoLocalizacaoFisico: data.enderecoLocalizacaoFisico,\n    documentacaoFisicoFileName: data.documentacaoFisicoFile?.[0]?.name,\n  });\n\n  // Simula um atraso de rede\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  let assetTypeForLog: string;\n  if (data.tipo === 'digital') {\n    assetTypeForLog = 'digital';\n  } else if (data.tipo === 'fisico') {\n    assetTypeForLog = 'fisico';\n  } else {\n    return { success: false, error: 'Tipo de ativo inválido.' };\n  }\n\n  console.log(`Tipo de ativo simulado: ${assetTypeForLog}`);\n  \n  // Em uma implementação real com Firebase, você usaria:\n  // try {\n  //   const commonData = {\n  //     userId,\n  //     nomeAtivo: data.nomeAtivo,\n  //     observacoes: data.observacoes, // Alterado\n  //     // valorAtualEstimado: data.valorAtualEstimado, // Removido\n  //     quemComprou: data.quemComprou || '',\n  //     contribuicaoParceiro1: data.contribuicaoParceiro1,\n  //     contribuicaoParceiro2: data.contribuicaoParceiro2,\n  //     dataAquisicao: data.dataAquisicao, \n  //     tipo: data.tipo,\n  //     createdAt: serverTimestamp(),\n  //     updatedAt: serverTimestamp(),\n  //   };\n  //   let assetDataToSave;\n  //   if (data.tipo === 'digital') {\n  //     assetDataToSave = {\n  //       ...commonData,\n  //       tipoAtivoDigital: data.tipoAtivoDigital!, // Alterado\n  //       quantidadeDigital: data.quantidadeDigital!,\n  //       valorPagoEpocaDigital: data.valorPagoEpocaDigital!,\n  //     } // as Omit<DigitalAsset, 'id' | 'valorAtualEstimado'>; // Ajustar Omit se valorAtualEstimado foi removido de DigitalAsset\n  //   } else { // fisico\n  //     assetDataToSave = {\n  //       ...commonData,\n  //       tipoImovelBemFisico: data.tipoImovelBemFisico!,\n  //       enderecoLocalizacaoFisico: data.enderecoLocalizacaoFisico || '',\n  //       // documentacaoFisico: \"url_do_arquivo_no_storage\" // Lógica de upload seria separada\n  //     } // as Omit<PhysicalAsset, 'id' | 'valorAtualEstimado'>; // Ajustar Omit se valorAtualEstimado foi removido de PhysicalAsset\n  //   }\n  //   const docRef = await addDoc(collection(db!, 'assets'), assetDataToSave); // db! aqui assume que db não é null\n  //   return { success: true, assetId: docRef.id };\n  // } catch (error) {\n  //   console.error('Erro ao adicionar ativo:', error);\n  //   return { success: false, error: 'Falha ao adicionar ativo no Firestore.' };\n  // }\n\n  return { success: true, assetId: `mock-asset-${Date.now()}` };\n}\n"],"names":[],"mappings":";;;;;;;;AAQO,eAAe,uCAAM,GAAN,SAAS,IAAmB,EAAE,MAAc;IAChE,IAAI,CAAC,QAAQ;QACX,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2B;IAC7D;IAEA,QAAQ,GAAG,CAAC,sDAAsD;QAChE;QACA,MAAM,KAAK,IAAI;QACf,WAAW,KAAK,SAAS;QACzB,eAAe,KAAK,aAAa;QACjC,aAAa,KAAK,WAAW;QAC7B,gFAAgF;QAChF,aAAa,KAAK,WAAW;QAC7B,uBAAuB,KAAK,qBAAqB;QACjD,uBAAuB,KAAK,qBAAqB;QACjD,gEAAgE;QAChE,kBAAkB,KAAK,gBAAgB;QACvC,mBAAmB,KAAK,iBAAiB;QACzC,uBAAuB,KAAK,qBAAqB;QACjD,qBAAqB,KAAK,mBAAmB;QAC7C,2BAA2B,KAAK,yBAAyB;QACzD,4BAA4B,KAAK,sBAAsB,EAAE,CAAC,EAAE,EAAE;IAChE;IAEA,2BAA2B;IAC3B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,IAAI;IACJ,IAAI,KAAK,IAAI,KAAK,WAAW;QAC3B,kBAAkB;IACpB,OAAO,IAAI,KAAK,IAAI,KAAK,UAAU;QACjC,kBAAkB;IACpB,OAAO;QACL,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0B;IAC5D;IAEA,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,iBAAiB;IAExD,uDAAuD;IACvD,QAAQ;IACR,yBAAyB;IACzB,cAAc;IACd,iCAAiC;IACjC,iDAAiD;IACjD,kEAAkE;IAClE,2CAA2C;IAC3C,yDAAyD;IACzD,yDAAyD;IACzD,0CAA0C;IAC1C,uBAAuB;IACvB,oCAAoC;IACpC,oCAAoC;IACpC,OAAO;IACP,yBAAyB;IACzB,mCAAmC;IACnC,0BAA0B;IAC1B,uBAAuB;IACvB,8DAA8D;IAC9D,oDAAoD;IACpD,4DAA4D;IAC5D,kIAAkI;IAClI,uBAAuB;IACvB,0BAA0B;IAC1B,uBAAuB;IACvB,wDAAwD;IACxD,yEAAyE;IACzE,8FAA8F;IAC9F,oIAAoI;IACpI,MAAM;IACN,kHAAkH;IAClH,kDAAkD;IAClD,oBAAoB;IACpB,sDAAsD;IACtD,gFAAgF;IAChF,IAAI;IAEJ,OAAO;QAAE,SAAS;QAAM,SAAS,CAAC,WAAW,EAAE,KAAK,GAAG,IAAI;IAAC;AAC9D;;;IA7EsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(main)/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(main)/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}